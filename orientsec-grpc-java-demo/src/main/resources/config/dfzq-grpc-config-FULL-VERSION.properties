# 配置信息分为以下四类：
# 1. common config            (公共配置)
# 2. provider config   (服务提供者需要填写)
# 3. consumer config   (服务消费者需要填写)
# 4. zookeeper config         (提供者、消费者都需要配置)

# 应用启动时，按以下顺序依次找配置文件；如果没找到，则顺延到下一条：
# 1.用户可以通过启动参数-Ddfzq.grpc.config=/xxx/xxx 配置grpc配置文件所在的目录的绝对路径
# 2.从启动目录下的config中查找grpc配置文件（如果找不到从jar包内的classpath:/config/目录下查找）
# 3.从启动目录下查找grpc配置文件（如果找不到从jar包内的classpath:/目录下查找）

# 例如：
# 如果是maven项目，可以放在源码/src/main/resources/config目录下，也可以放在源码/src/main/resources/目录下


# ------------ begin of common config ------------

# 必填,类型string,说明:当前应用名称
common.application=grpc-test-application

# 必填,类型string,说明:当前项目名
common.project=grpc-test-project

# 必填,类型string,说明:项目负责人,员工工号,多个工号之间使用英文逗号
common.owner=A9001,A9002,A9003

# 可选,类型string,说明:服务注册根路径,默认值/Application/grpc
# common.root=/Application/grpc

# 可选,类型string,说明:服务注册使用的IP地址
# 如果不配置该参数值，当前服务器的IP地址为"非127.0.0.1的第一个网卡的IP地址"
# 使用场合:一台服务器安装有多个网卡,如果需要指定不是第一个网卡的IP地址为服务注册的IP地址
# common.localhost.ip=xxx.xxx.xxx.xxx


# 可选，类型boolean，缺省值true,是否启用熔断机制
# common.breaker.enabled=true

# 可选，类型int,说明：熔断机制统计周期，单位毫秒，默认值为60000，即60秒
# common.breaker.statistics.period.timeInMilliseconds=60000

# 可选，类型,int，说明：在一个统计周期中至少请求多少次才会触发熔断机制，默认值为20
# common.breaker.requestVolumeThreshold=20

# 可选，类型int，说明：熔断器打开的错误百分比阈值，默认值50
# 比如：一个统计周期内共有20个请求，如果其中10个请求失败，熔断器打开。
# common.breaker.errorThresholdPercentage=50

# 可选，类型int,说明：熔断器打开后经过多长时间允许一次请求尝试执行，单位毫秒，默认值60000，即60秒
# 熔断器打开后经过一段时间放行一条请求。
# 如果该请求执行成功，说明服务可能已经恢复了正常，关闭熔断器，如果该请求执行失败，则认为服务依然不可用，熔断器继续保持打开状态。
# common.breaker.sleepWindowInMilliseconds=60000

# ------------ end of common config ------------




# ------------ begin of provider config ------------

# 必填,类型string,说明:服务的版本信息，一般表示服务接口的版本号
provider.version=1.0.0

# ----------------------------------------
# 可选,类型int,缺省值20,说明:服务提供端可处理的最大连接数，即同一时刻最多有多少个消费端与当前服务端建立连接
# 如果不限制连接数，将这个值配置为0
# 对连接数的控制，无法控制到指定的服务，只能控制到指定的IP:port
# provider.default.connections=

# 可选,类型int,缺省值2000,说明:服务提供端可处理的最大并发请求数
# 如果不限制并发请求数，将这个值配置为0
# 备注：同一个连接发送多次请求
# provider.default.requests=

# 可选,类型boolean,缺省值false,说明:服务是否过时，如果为true则应用该服务时日志error告警
# provider.deprecated=

# 可选,类型int,缺省值100,说明:服务provider权重，是服务provider的容量，在负载均衡基于权重的选择算法中用到
# provider.weight=

# 可选, 类型boolean, 缺省值false, 说明:服务是否处于访问保护状态
# 属性的可选值为false 、true ，分别表示不受保护、受保护，缺省值为false （不受保护）
# provider.access.protected=false

# 可选,类型String,固定值provider,说明:provider表示服务提供端，consumer表示服务消费端
# provider.side=provider

# 可选,类型string,缺省值1.0.0,说明:gRPC 协议版本号
# provider.grpc=

# 可选,类型boolean,缺省值true,说明:表示当前服务器实例是否为主服务器
# 参数值配置为true表示主服务器，false表示备服务器
# 使用场合：实现主备自动切换
# provider.master=true

# 可选,类型string,缺省值为空，说明:表示当前服务所属的分组
# 使用场合：多机房服务分组功能
# provider.group=

# ------------ end of provider config ------------




# ------------ begin of consumer config ------------



# --------------------------
# 可选,类型string,说明:服务提供者的版本号
# 指定了服务提供者的版本号之后，程序会优先选择具有指定版本的服务；如果注册中心没有该版本的服务，则不限制版本重新选择服务提供者。
# 使用场景为：注册中心上同一个服务多版本共存，并且服务的高版本与低版本不兼容，而当前应用由于特殊原因只能调用低版本的服务
# 如果当前应用只调用一个服务，属性值直接配置版本号，例如1.0.0
# 如果当前应用需要调用多个服务，属性值按照冒号逗号的方式分隔，例如com.dfzq.examples.Greeter:1.0.0,com.orientsec.examples.Hello:1.2.1
# 如果当前应用需要调用多个服务，建议在服务治理平台维护该属性，只有一个版本的服务可以不维护
# consumer.service.version=

# 可选,类型string,缺省值connection,说明：负载均衡模式
# 可选值为 connection 和 request,分别表示“连接负载均衡”、“请求负载均衡”
# “连接负载均衡”适用于大部分业务场景，服务端和客户端消耗的资源较小。
# “请求负载均衡”适用于服务端业务逻辑复杂、并有多台服务器提供相同服务的场景。
# consumer.loadbalance.mode=connection

# 可选,类型string,缺省值round_robin,说明:负载均衡策略，
# 可选范围：pick_first、round_robin、weight_round_robin、consistent_hash
# 参数值的含义分别为：随机、轮询、加权轮询、一致性Hash
# consumer.default.loadbalance=

# 可选,类型string,负载均衡策略选择是consistent_hash(一致性Hash)，配置进行hash运算的参数名称的列表
# 多个参数之间使用英文逗号分隔，例如 id,name
# 如果负载均衡策略选择是consistent_hash，但是该参数未配置参数值、或者参数值列表不正确，则取第一个参数的参数值返回
# 备注：该参数只支持通过配置文件配置
# consumer.consistent.hash.arguments=id

# 可选,类型String,默认值consumers,说明:所属范畴
# consumer.category=consumers

# 可选,类型String,固定值consumer,说明:provider表示服务提供端，consumer表示服务消费端
# consumer.side=consumer

# 可选,类型int,缺省值0,0表示不进行重试,说明:服务调用出错后自动重试次数
# consumer.default.retries=0

# 可选,类型integer,缺省值5,说明：连续多少次请求出错，自动切换到提供相同服务的新服务器
# consumer.switchover.threshold=5

# 可选,类型为long,单位为秒,缺省值为60,说明：服务提供者不可用时的惩罚时间，即多次请求出错的服务提供者一段时间内不再去请求
# 属性值大于或等于0，等于0表示没有惩罚时间，如果客户端只剩下一个服务提供者，即使服务提供者不可用，也不做剔除操作。
# consumer.unavailable.provider.punish.time=60

# 指数退避协议https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md
# 可选,类型long,缺省值120,单位秒,说明:grpc断线重连指数退避协议"失败重试等待时间上限"参数
# consumer.backoff.max=120

# 可选,类型string,缺省值为空，说明:表示当前客户端可以调用的服务端分组
# 使用场合：服务分组，业务隔离，通过分组优先实现多机房支持
# 配置示例：A      含义:当前客户端只能调用分组为A的服务端
# 配置示例：A,B    含义:当前客户端只能调用分组为A或者分组为B的服务端
# 配置示例：A1,A2;B1,B2;C1,C2
# 含义: 当前客户端优先访问分组为A1、A2的服务端。如果分组为A1、A2服务端不存在，访问分组为B1、B2的服务端；
#      如果分组为B1、B2的服务端也不存在，访问分组为C1、C2的服务端；如果分组为C1、C2的服务端也不存在，客户端报错。
# consumer.group=

# ------------ end of consumer config ------------




# ------------ begin of zookeeper config ------------

# 类型string,说明: 注册中心服务器列表，既支持单机，也支持集群
# 可选,zookeeper.host.server和zookeeper.private.host.server至少配置一个参数
# zookeeper.host.server=168.61.2.23:2181,168.61.2.24:2181,168.61.2.25:2181
zookeeper.host.server=127.0.0.1:2181

# 可选,类型string,说明：digest模式访问控制用户名
# zookeeper.acl.username=admin

# 可选,类型string,说明：digest模式访问控制密码
# 这里的密码配置的是密文，使用com.orientsec.grpc.common.util.DesEncryptUtils#encrypt(String plaintext)进行加密
# zookeeper.acl.password=9b579c35ca6cc74230f1eed29064d10a


# 可选,类型int,缺省值86400000,单位毫秒,即缺省值为1天,说明:zk断线重连最长时间
# zookeeper.retry.time=86400000

# 可选,类型int,缺省值4000,单位毫秒,说明:连接超时时间
# zookeeper.connectiontimeout=4000

# 可选,类型int,缺省值4000,单位毫秒,说明:会话超时时间
# zookeeper.sessiontimeout=4000


# ----begin---服务端支持注册到多个注册中心---------

# 可选，类型string,说明：服务端额外使用的注册中心服务器列表-01
# 如果要开启【服务端注册到多套注册中心功能】，该参数需要配置
# zookeeper.service-register-01.host.server=

# 可选，类型string，说明服务注册根路径,默认值/Application/grpc
# zookeeper.service-register-01.root=

# 可选，类型string，说明：digest模式访问控制用户名
# zookeeper.service-register-01.acl.username=

# 可选，类型string，说明：digest模式访问控制密码
# zookeeper.service-register-01.acl.password=


# 可选，类型string,说明：服务端额外使用的注册中心服务器列表-02
# zookeeper.service-register-02.host.server=

# 可选，类型string，说明服务注册根路径,默认值/Application/grpc
# zookeeper.service-register-02.root=

# 可选，类型string，说明：digest模式访问控制用户名
# zookeeper.service-register-02.acl.username=

# 可选，类型string，说明：digest模式访问控制密码
# zookeeper.service-register-02.acl.password=

# ...

# ----end-----服务端支持注册到多个注册中心---------


# ----begin----区分内外部服务、私有注册中心配置----------------------

# 类型string，说明: 私有注册中心服务器列表，既支持单机，也支持集群
# 可选,zookeeper.host.server和zookeeper.private.host.server至少配置一个参数
# zookeeper.private.host.server=

# 可选，类型string，说明: 私有注册中心注册地址，默认值/Application/grpc
# zookeeper.private.root=

# 可选，类型string，说明：私有注册中心digest模式ACL的用户名
# zookeeper.private.acl.username=

# 可选，类型string，说明：私有注册中心digest模式ACL的密码
# zookeeper.private.acl.password=

# 可选，类型string，说明：表示公共服务名称列表，多个服务名称之间以英文逗号分隔，如果不配置，表示所有服务都是公共服务
# 参数值示例 com.orientsec.hello.Greeter3,com.orientsec.hello.Greeter4
# 属性值过长可以在行末增加反斜杠\，然后在下一行继续配置其它属性值，注意反斜杠\后面不能有空格
# public.service.list=

# 可选，类型string，说明：表示私有服务名称列表，多个服务名称之间以英文逗号分隔，如果不配置，将公共服务名称列表之外的服务都视为私有服务
# 参数值示例 com.orientsec.hello.Greeter1,com.orientsec.hello.Greeter2
# 属性值过长可以在行末增加反斜杠\，然后在下一行继续配置其它属性值，注意反斜杠\后面不能有空格
# private.service.list=

#----end------区分内外部服务、私有注册中心配置----------------------



# ------------ end of zookeeper config ------------
